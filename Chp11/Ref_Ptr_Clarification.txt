Case 1:
int* returnA() {
    int *j = &a;
    return j;
}

returnA() is asking to return a pointer, which works because j is a pointer. 
int *j = &a initializes j to point to a. Then the value of j is returned, which is the address of  a.


Case 2:
int* returnB() {
    return &b;
}

returnB() is returning a pointer. Since a pointer points to an address, the reason why returnB() works is because &b is returned. 
Same as Case 1, but in a single step. &b gives the address of b.

Case 3:
int& returnC() {
    return c;
}

In returnC(), c is a reference to an int which is returned. The & is not automatically appended.
A reference is not an address the same way a pointer is - it's an alternative name for a variable. 
Thus, & operator is not required to get a reference of a variable.

Case 4:
int& returnC2() {
    int *d = &c;
    return *d;
}

*d refers to the original variable c, pointed to by c. This can implicitly be turned into a reference, like in returnC().
